---
interface AstroProps {
    active: String;
}

const { active = "home" } = Astro.props;

const nav = [
    {
        name: "Home",
        href: "/",
    },
    {
        name: "About",
        href: "/about",
    },
    {
        name: "Projects",
        href: "/projects",
    },
    {
        name: "Contact",
        href: "/contact",
    },
];
---

<header class="fixed top-0 z-50 left-0 w-full flex justify-center">
    <div class="flex w-full justify-between items-center py-10 px-10 max-w-7xl">
        <h2 class="text-3xl font-bold tracking-tighter">andka</h2>
        <nav class="bg-sky-100 flex relative p-2 rounded-full">
            <div id="nav-link-background" class="bg-white rounded-full absolute z-0 transition-all duration-500 ease-out"></div>
            {
                nav.map(({ name, href }, index) => (
                    <a href={href} class="z-10 nav-menu" data-active={active.toLowerCase() === name.toLowerCase()} data-index={index}>
                        <div class={`flex px-2 py-5 items-center justify-center h-8 w-28 text-center text-sky-500`}>{name}</div>
                    </a>
                ))
            }
        </nav>

        <div class="flex gap-8 items-center justify-center">
            <label class="swap swap-rotate">
                <input type="checkbox" />
                <svg class="swap-on fill-yellow-300 w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z" ></path></svg >
                <svg class="swap-off fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z" ></path></svg >
            </label>
            <a href="https://github.com/xirf">
                <svg stroke="currentColor" class="h-6 w-6" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" ><path d="M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z" ></path></svg >
            </a>
        </div>
    </div>
</header>

<script>
    // @ts-nocheck
    const navLinkBackground = document.getElementById("nav-link-background");
    const navLinks = document.querySelectorAll(".nav-menu");
    const activeElement = document.querySelector("[data-active]");
    let activeElementBefore = activeElement.dataset.index;
    let backToActive = null;

    backToActive = setTimeout(() => {
        changePosition(activeElement.offsetLeft, activeElement.offsetWidth);
    }, 0);

    navLinks.forEach((element) => {
        element.addEventListener("mouseenter", () => {
            if (backToActive) clearTimeout(backToActive);
            if (element.dataset.index == activeElementBefore) return;

            let direction = element.dataset.index - activeElementBefore;
            let changes = direction > 0 ? direction - 0.5 : direction * -1 + 0.1;
            if (changes < 1) changes = 1 + changes / 2;

            changeScale(changes, direction);

            setTimeout(() => {
                changePosition(element.offsetLeft, element.offsetWidth);
                navLinkBackground.style.transform = `scaleX(1)`;
            }, 400);

            activeElementBefore = element.dataset.index;
        });

        element.addEventListener("mouseleave", () => {
            if (backToActive) clearTimeout(backToActive);
            backToActive = setTimeout(() => {
                let direction = activeElement.dataset.index - activeElementBefore;
                let changes = direction >= 0 ? direction + 0.5 : direction * -1 - 0.5;
                if (changes < 1) changes = 1 + changes / 2;

                changeScale(changes, direction);
                setTimeout(() => {
                    changePosition(activeElement.offsetLeft, activeElement.offsetWidth);
                    navLinkBackground.style.transform = `scaleX(1)`;
                }, 400);

                activeElementBefore = activeElement.dataset.index;
            }, 500);
        });
    });

    function changePosition(left, width) {
        navLinkBackground.style.left = `${left}px`;
        navLinkBackground.style.width = `${width}px`;
        navLinkBackground.style.height = `${activeElement.offsetHeight}px`;
    }

    function changeScale(scale, direction) {
        navLinkBackground.style.transformOrigin = `${direction > 0 ? "left" : "right"}`;
        setTimeout(() => {
            navLinkBackground.style.transform = `scaleX(${scale})`;
        }, 100);
    }
</script>
