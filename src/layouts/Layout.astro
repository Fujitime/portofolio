---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Poppins&display=swap"
			rel="stylesheet"
		/>
		<title>{title}</title>
	</head>
	<body class="flex items-center justify-center boxie bg-primary">
		<div class="max-w-7xl px-10 w-full">
			<slot />
		</div>
		<div class="curzr" hidden>
			<div class="curzr-dot"></div>
		</div>
	</body>
</html>
<!-- <script is:inline>
	class RingDot {
		constructor() {
			this.root = document.body;
			this.cursor = document.querySelector(".curzr");
			this.dot = document.querySelector(".curzr-dot");

			this.pointerX = 0;
			this.pointerY = 0;
			this.cursorSize = 30;

			this.cursorStyle = {
				boxSizing: "border-box",
				position: "fixed",
				display: "flex",
				top: `${this.cursorSize / -2}px`,
				left: `${this.cursorSize / -2}px`,
				zIndex: "2147483647",
				justifyContent: "center",
				alignItems: "center",
				width: `${this.cursorSize}px`,
				height: `${this.cursorSize}px`,
				backgroundColor: "#fff0",
				boxShadow: "0 0 0 .25px #c0caf5, 0 0 0 1px #c0caf5",
				borderRadius: "50%",
				transition: "500ms, transform 100ms",
				userSelect: "none",
				pointerEvents: "none",
			};

			this.dotStyle = {
				boxSizing: "border-box",
				position: "fixed",
				zIndex: "2147483647",
				width: "4px",
				height: "4px",
				backgroundColor: "#111920",
				boxShadow: "0 0 0 .5px #c0caf5",
				borderRadius: "50%",
				userSelect: "none",
				pointerEvents: "none",
			};

			this.init(this.cursor, this.cursorStyle);
			this.init(this.dot, this.dotStyle);
		}

		init(el, style) {
			Object.assign(el.style, style);
			this.cursor.removeAttribute("hidden");
		}

		move(event) {
			try {
				if (
					event.target.localName === "button" ||
					event.target.localName === "a" ||
					event.target.onclick !== null ||
					event.target.className.includes("curzr-hover")
				) {
					this.hover(40);
				} else {
					this.hoverout();
				}
			} catch (error) {
				this.hover(40)
			} finally {
				this.pointerX = event.pageX + this.root.getBoundingClientRect().x;
				this.pointerY = event.pageY + this.root.getBoundingClientRect().y;

				this.cursor.style.transform = `translate3d(${this.pointerX}px, ${this.pointerY}px, 0)`;
			}
		}

		hover(radius) {
			this.cursor.style.width = this.cursor.style.height = `${radius}px`;
			this.cursor.style.top = this.cursor.style.left = `${radius / -2}px`;
		}

		hoverout() {
			this.cursor.style.width = this.cursor.style.height = `${this.cursorSize}px`;
			this.cursor.style.top = this.cursor.style.left = `${this.cursorSize / -2}px`;
		}

		click() {
			this.cursor.style.transform += ` scale(0.75)`;
			setTimeout(() => {
				this.cursor.style.transform = this.cursor.style.transform.replace(
					` scale(0.75)`,
					""
				);
			}, 35);
		}

		remove() {
			this.cursor.remove();
			this.dot.remove();
		}
	}

	(() => {
		const cursor = new RingDot();
		if (
			!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
				navigator.userAgent
			)
		) {
			document.onmousemove = function (event) {
				cursor.move(event);
			};
			document.onclick = function () {
				cursor.click();
			};
		} else {
			cursor.remove();
		}
	})();
</script> -->
<style is:global>
	* {
		box-sizing: border-box;
	}

	::-webkit-scrollbar: {
		width: 1px;
		position: absolute;
		right: 0;
	}

	html {
		font-family: "Poppins", system-ui, sans-serif;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	.boxie {
		--bg-color: #e4e6f1;
		background-size: 40px 40px;
		background-image: linear-gradient(to right, var(--bg-color) 1px, transparent 1px),
			linear-gradient(to bottom, var(--bg-color) 1px, transparent 1px);
	}
</style>
